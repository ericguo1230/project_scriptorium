/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/admin/blog-posts/{blogPostId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve comments for a blog post for admin, which enables sort by reports.
     * @description Fetches a paginated list of comments for a specific blog post with optional sorting.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
          /** @description Field to sort by (e.g., 'createdAt'). */
          sortBy?: "createdAt" | "rating" | "controversial" | "report";
          /** @description Sort direction, either ascending (asc) or descending (desc). */
          sortDirection?: "asc" | "desc";
        };
        header?: never;
        path: {
          /** @description The unique ID of the blog post to retrieve comments for. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Comments retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata?: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount?: number;
                /**
                 * @description Total number of comments.
                 * @example 50
                 */
                totalCount?: number;
              };
              data?: components["schemas"]["BlogComment"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/blog-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a list of blog posts for admin, which enables sort by reports.
     * @description Fetches a paginated list of blog posts with optional filters.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
          /** @description Filter blog posts by title. */
          title?: string;
          /** @description Filter blog posts by description. */
          description?: string;
          /** @description Filter blog posts by template content. */
          templateContent?: string;
          /** @description Field to sort by (e.g., 'createdAt'). */
          sortBy?: "createdAt" | "rating" | "controversial" | "report";
          /** @description Sort direction, either ascending (asc) or descending (desc). */
          sortDirection?: "asc" | "desc";
          /** @description Comma-separated list of tags to filter by. */
          tags?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Blog posts retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata?: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount?: number;
                /**
                 * @description Total number of blog posts.
                 * @example 50
                 */
                totalCount?: number;
              };
              data?: components["schemas"]["Blog"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/reports/{reportId}/approve": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Approve a report
     * @description Allows an admin to approve a specific report which hides the post or comment.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the report to approve. */
          reportId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Report approved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Report successfully approved. */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to invalid report ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden, user lacks the necessary permissions to approve reports. */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Report not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/reports/{reportId}/close": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Close a report
     * @description Allows an admin to close a specific report which hides the post or comment.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the report to close. */
          reportId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Report closed successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Report successfully closed. */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to invalid report ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden, user lacks the necessary permissions to close reports. */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Report not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/reports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a list of reports
     * @description Allows an admin to retrieve a paginated list of reports with optional filters by status.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
          /** @description Filter reports by their status. */
          status?: "open" | "closed";
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Reports retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata?: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount?: number;
                /**
                 * @description Total number of reports.
                 * @example 50
                 */
                totalCount?: number;
              };
              data: components["schemas"]["Report"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden, user lacks the necessary permissions to access this resource. */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Log in a user
     * @description Authenticates a user by validating the credentials and returns access and refresh tokens.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: email
             * @description The user's email address.
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @description The user's password.
             * @example Password123!
             */
            password: string;
          };
        };
      };
      responses: {
        /** @description User logged in successfully, returning tokens. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data: {
                /**
                 * @description JWT access token.
                 * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                 */
                accessToken: string;
                /**
                 * @description JWT refresh token.
                 * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                 */
                refreshToken: string;
              };
            };
          };
        };
        /** @description Bad request, possibly due to invalid input format. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized access due to incorrect credentials. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid or missing input values. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Refresh access token
     * @description Uses a valid refresh token to issue a new access token.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The refresh token provided during login.
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            refreshToken: string;
          };
        };
      };
      responses: {
        /** @description Access token refreshed successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: {
                /**
                 * @description JWT access token.
                 * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                 */
                accessToken?: string;
              };
            };
          };
        };
        /** @description Bad request, possibly due to invalid input format. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized access due to incorrect credentials. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid or missing input values. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a new user
     * @description Creates a new user account with the provided registration details.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: email
             * @description The user's email address.
             * @example newuser@example.com
             */
            email: string;
            /**
             * Format: password
             * @description The user's password. Must be at least the minimum length required.
             * @example SecurePassword123
             */
            password: string;
            /**
             * Format: password
             * @description Confirmation of the user's password. Must match the password field.
             * @example SecurePassword123
             */
            confirmPassword: string;
            /**
             * @description The user's first name.
             * @example John
             */
            firstName: string;
            /**
             * @description The user's last name.
             * @example Doe
             */
            lastName: string;
            /**
             * @description Optional phone number of the user.
             * @example +1234567890
             */
            phoneNumber?: string;
          };
        };
      };
      responses: {
        /** @description User registered successfully. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["User"];
            };
          };
        };
        /** @description Bad request, possibly due to invalid input format. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid or missing input values (e.g., non-matching passwords). */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/reset-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reset the user's password
     * @description Allows an authenticated user to reset their password by providing the current password and a new password.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: password
             * @description The user's current password.
             * @example OldPassword123
             */
            currentPassword: string;
            /**
             * Format: password
             * @description The user's new password. Must meet the required minimum length and complexity.
             * @example NewSecurePassword456
             */
            newPassword: string;
          };
        };
      };
      responses: {
        /** @description Password reset successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Password reset successfully */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to invalid input format. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to an invalid or missing authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to incorrect current password or password policy violation. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}/comments/{commentId}/rate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Rate a comment on a blog post
     * @description Allows an authenticated user to rate a specific comment on a blog post.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post. */
          blogPostId: number;
          /** @description The unique ID of the comment to rate. */
          commentId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Rating given to the blog post (e.g., +1 for upvote, -1 for downvote).
             * @example +1
             * @enum {string}
             */
            rating: string;
          };
        };
      };
      responses: {
        /** @description Comment rated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Comment rated successfully */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Comment not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}/comments/{commentId}/replies": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve replies to a specific comment
     * @description Fetches a paginated list of replies for a specific comment on a blog post, with optional authentication to view hidden comments.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
        };
        header?: never;
        path: {
          /** @description The unique ID of the blog post the comment belongs to. */
          blogPostId: number;
          /** @description The unique ID of the comment to retrieve replies for. */
          commentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Replies retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount?: number;
                /**
                 * @description Total number of replies.
                 * @example 50
                 */
                totalCount?: number;
              };
              data: components["schemas"]["BlogComment"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Comment not found or has no replies. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}/comments/{commentId}/report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Report a comment
     * @description Allows an authenticated user to report a specific blog post with an explanation.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post. */
          blogPostId: number;
          /** @description The unique ID of the comment to report. */
          commentId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Explanation of why the comment is being reported.
             * @example This comment contains inappropriate content.
             */
            explanation: string;
          };
        };
      };
      responses: {
        /** @description Report submitted successfully. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Unique identifier for the report.
               * @example 101
               */
              reportId?: number;
              /**
               * @description ID of the user who submitted the report.
               * @example 123
               */
              userId?: number;
              /**
               * @description ID of the reported blog post.
               * @example 456
               */
              blogPostId?: number;
              /**
               * @description ID of the reported comment.
               * @example 456
               */
              commentId?: number;
              /**
               * @description Explanation provided by the user.
               * @example This comment contains inappropriate content.
               */
              explanation?: string;
              /**
               * Format: date-time
               * @description Date and time when the report was created.
               * @example 2024-10-31T12:00:00.000Z
               */
              createdAt?: string;
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Comment not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Conflict due to duplicate data. */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}/comments/{commentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a specific comment
     * @description Fetches a specific comment by its ID, with optional authentication.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to retrieve comments for. */
          blogPostId: number;
          /** @description The unique ID of the comment to retrieve. */
          commentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Comment retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["BlogComment"];
            };
          };
        };
        /** @description Bad request, possibly due to an invalid comment ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Comment not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete a comment on a blog post
     * @description Allows an authenticated user to delete a specific comment they made on a blog post.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post. */
          blogPostId: number;
          /** @description The unique ID of the comment to delete. */
          commentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Comment deleted successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Comment deleted successfully */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to an invalid comment ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Comment not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /**
     * Update a specific comment
     * @description Allows an authenticated user to update their comment by its ID.
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to update a comment on. */
          blogPostId: number;
          /** @description The unique ID of the comment to update. */
          commentId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The updated content of the comment.
             * @example This is an updated comment.
             */
            content: string;
          };
        };
      };
      responses: {
        /** @description Comment updated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["BlogComment"];
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden, possibly due to insufficient permissions. */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Comment not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve comments for a blog post
     * @description Fetches a paginated list of comments for a specific blog post with optional sorting.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
          /** @description Field to sort by (e.g., 'createdAt'). */
          sortBy?: string;
          /** @description Sort direction, either ascending (asc) or descending (desc). */
          sortDirection?: string;
        };
        header?: never;
        path: {
          /** @description The unique ID of the blog post to retrieve comments for. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Comments retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata: {
                /** @example 1 */
                page: number;
                /** @example 10 */
                perPage: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount: number;
                /**
                 * @description Total number of comments.
                 * @example 50
                 */
                totalCount: number;
              };
              data: components["schemas"]["BlogComment"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Add a comment to a blog post
     * @description Allows an authenticated user to add a comment to a specified blog post, optionally replying to another comment. Note that you can only reply to a top-level comment.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to add a comment to. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The content of the comment.
             * @example This is a great post! Thanks for sharing.
             */
            content: string;
            /**
             * @description The ID of the parent comment.
             * @example null
             */
            parentId?: number | null;
          };
        };
      };
      responses: {
        /** @description Comment added successfully. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["BlogComment"];
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}/rate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Rate a blog post
     * @description Allows an authenticated user to rate a specific blog post. New ratings will overwrite existing ratings.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to rate. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Rating given to the blog post (e.g., +1 for upvote, -1 for downvote).
             * @example +1
             * @enum {string}
             */
            rating: string;
          };
        };
      };
      responses: {
        /** @description Blog post rated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Blog post rated successfully */
              message?: string;
              /**
               * @description Updated net rating of the blog post.
               * @example 5
               */
              netRating?: number;
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}/report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Report a blog post
     * @description Allows an authenticated user to report a specific blog post with an explanation.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to report. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Explanation of why the blog post is being reported.
             * @example This post contains inappropriate content.
             */
            explanation: string;
          };
        };
      };
      responses: {
        /** @description Report submitted successfully. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description Unique identifier for the report.
               * @example 101
               */
              reportId?: number;
              /**
               * @description ID of the user who submitted the report.
               * @example 123
               */
              userId?: number;
              /**
               * @description ID of the reported blog post.
               * @example 456
               */
              blogPostId?: number;
              /**
               * @description Explanation provided by the user.
               * @example This post contains inappropriate content.
               */
              explanation?: string;
              /**
               * Format: date-time
               * @description Date and time when the report was created.
               * @example 2024-10-31T12:00:00.000Z
               */
              createdAt?: string;
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Conflict due to duplicate data. */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/blog-posts/{blogPostId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a specific blog post
     * @description Fetches a specific blog post by its ID.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to retrieve. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Blog post retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["Blog"];
            };
          };
        };
        /** @description Bad request, possibly due to an invalid blog post ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete a blog post
     * @description Allows an authenticated user to delete a specific blog post they own.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to delete. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Blog post deleted successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Blog post deleted successfully */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to an invalid blog post ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /**
     * Update a blog post
     * @description Allows an authenticated user to update specified fields of a blog post they own.
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the blog post to update. */
          blogPostId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The updated title of the blog post.
             * @example Updated Blog Title
             */
            title?: string;
            /**
             * @description The updated content of the blog post.
             * @example This blog post provides updated content on templates.
             */
            description?: string;
            /**
             * @description Updated tags associated with the blog post.
             * @example [
             *       "tutorial",
             *       "updated"
             *     ]
             */
            tags?: string[];
            links?: number[];
          };
        };
      };
      responses: {
        /** @description Blog post updated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Blog"];
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Blog post not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/api/v1/blog-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a list of blog posts
     * @description Fetches a paginated list of blog posts with optional filters and sorting.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: string;
          /** @description Number of items per page. */
          limit?: string;
          /** @description Filter blog posts by title. */
          title?: string;
          /** @description Filter blog posts by description. */
          description?: string;
          /** @description Filter blog posts by template content. */
          templateContent?: string;
          /** @description Field to sort by (e.g., 'createdAt'). Options are 'createdAt', 'rating', and 'controversial', 'controversial' is determined by the total number of ratings. */
          sortBy?: string;
          /** @description Sort direction, either ascending (asc) or descending (desc). */
          sortDirection?: string;
          /** @description Comma-separated list of tags to filter by. */
          tags?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Blog posts retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata?: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount?: number;
                /**
                 * @description Total number of blog posts.
                 * @example 50
                 */
                totalCount?: number;
              };
              data?: components["schemas"]["Blog"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create a new blog post
     * @description Allows an authenticated user to create a new blog post.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description Title of the blog post.
             * @example Getting Started with Templates
             */
            title: string;
            /**
             * @description Short description of the blog post.
             * @example An introductory guide on templates.
             */
            description: string;
            /**
             * @description Tags associated with the blog post.
             * @example [
             *       "guide",
             *       "templates"
             *     ]
             */
            tags?: string[];
            /** @example [
             *       1,
             *       2
             *     ] */
            links?: number[];
          };
        };
      };
      responses: {
        /** @description Blog post created successfully. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Blog"];
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/execute": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Execute code
     * @description Execute code.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            code: string;
            stdin?: string;
            /**
             * @example python
             * @enum {string}
             */
            language: "python" | "javascript" | "java" | "c" | "cpp";
          };
        };
      };
      responses: {
        /** @description Code executed successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["CodeExecution"];
            };
          };
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/me/avatar": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Upload or update user avatar
     * @description Allows an authenticated user to upload and update their avatar image.
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary
             * @description The avatar image file to be uploaded.
             */
            file?: string;
          };
        };
      };
      responses: {
        /** @description Avatar uploaded successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: {
                /**
                 * @description The filename of the uploaded avatar.
                 * @example avatar12345.png
                 */
                filename?: string;
              };
            };
          };
        };
        /** @description Bad request, possibly due to invalid file format or missing file. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid file upload data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user information
     * @description Retrieves the authenticated user's information by their user ID.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User information retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["User"];
            };
          };
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update user information
     * @description Updates the authenticated user's information with the provided data.
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: email
             * @description The user's email address.
             * @example updateduser@example.com
             */
            email?: string;
            /**
             * @description The user's first name.
             * @example Jane
             */
            firstName?: string;
            /**
             * @description The user's last name.
             * @example Smith
             */
            lastName?: string;
            /**
             * Format: uri
             * @description Optional URL for the user's avatar image.
             * @example https://example.com/avatar.jpg
             */
            avatar?: string;
            /**
             * @description Optional phone number of the user.
             * @example +9876543210
             */
            phoneNumber?: string;
          };
        };
      };
      responses: {
        /** @description User information updated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["User"];
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid or missing input values. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/api/v1/me/templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a list of templates created by the authenticated user
     * @description Fetches a paginated list of templates with optional filters for the authenticated user.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
          /** @description Filter templates by title. */
          title?: string;
          /** @description Filter templates by description. */
          description?: string;
          /** @description Comma-separated list of tags to filter by. */
          tags?: string;
          /** @description Comma-separated list of programming languages to filter by. */
          languages?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Templates retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata?: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount?: number;
                /**
                 * @description Total number of templates.
                 * @example 50
                 */
                totalCount?: number;
              };
              data?: components["schemas"]["Template"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/templates/{templateId}/blog-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve blog posts by template ID
     * @description Fetches a paginated list of blog posts associated with a specific template.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
        };
        header?: never;
        path: {
          /** @description The unique ID of the template to retrieve blog posts for. */
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Blog posts retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata?: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 5
                 */
                pageCount?: number;
                /**
                 * @description Total number of blog posts.
                 * @example 50
                 */
                totalCount?: number;
              };
              data?: components["schemas"]["Blog"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters or template ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/templates/{templateId}/execute": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Execute code.
     * @description Execute code.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the template to retrieve blog posts for. */
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Code executed successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["CodeExecution"];
            };
          };
        };
        /** @description Unprocessable entity, possibly due to invalid input data. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/templates/{templateId}/fork": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Fork a template
     * @description Creates a fork of an existing template for the authenticated user. Note that you cannot fork your own template.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the template to fork. */
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Template forked successfully. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              templateId: number;
              /** @example Template forked successfully */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to an invalid template ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/templates/{templateId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a template by ID
     * @description Fetches a specific template by its unique ID.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the template to retrieve. */
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Template retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["Template"];
            };
          };
        };
        /** @description Bad request, possibly due to an invalid template ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete a template
     * @description Deletes a template owned by the authenticated user.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the template to delete. */
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Template deleted successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @example Template deleted successfully */
              message?: string;
            };
          };
        };
        /** @description Bad request, possibly due to an invalid template ID. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /**
     * Update a template
     * @description Updates the specified fields of a template owned by the authenticated user.
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The unique ID of the template to update. */
          templateId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The title of the template.
             * @example My Updated Template
             */
            title?: string;
            /**
             * @description The description of the template.
             * @example An updated description of the template.
             */
            description?: string;
            /** @example [
             *       "tag1",
             *       "tag2"
             *     ] */
            tags?: string[];
            /**
             * @description The language of the template.
             * @example javascript
             */
            language?: string;
            /**
             * @description Optional standard input for code execution.
             * @example input data
             */
            stdin?: string;
            /**
             * @description The code content of the template.
             * @example console.log('Hello, world!');
             */
            code?: string;
          };
        };
      };
      responses: {
        /** @description Template updated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["Template"];
            };
          };
        };
        /** @description Bad request, possibly due to invalid input data. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden, possibly due to insufficient permissions. */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/api/v1/templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a list of templates
     * @description Fetches a paginated list of templates with optional filters.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination. */
          page?: number;
          /** @description Number of items per page. */
          limit?: number;
          /** @description Filter templates by title. */
          title?: string;
          /** @description Filter templates by description. */
          description?: string;
          /** @description Filter templates by user ID. */
          userId?: number;
          /** @description Comma-separated list of tags to filter by. */
          tags?: string;
          /** @description Comma-separated list of programming languages to filter by. */
          languages?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Templates retrieved successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              _metadata?: {
                /** @example 1 */
                page?: number;
                /** @example 10 */
                perPage?: number;
                /**
                 * @description Total number of pages.
                 * @example 1
                 */
                pageCount?: number;
                /**
                 * @description Total number of templates.
                 * @example 2
                 */
                totalCount?: number;
              };
              data?: components["schemas"]["Template"][];
            };
          };
        };
        /** @description Bad request, possibly due to invalid query parameters. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create a new template
     * @description Allows an authenticated user to create a new template with specified details.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description The title of the template. Each user can have only one template with the same title.
             * @example Sample Template
             */
            title: string;
            /**
             * @description The description of the template.
             * @example A description of the sample template.
             */
            description: string;
            /**
             * @description The code content of the template.
             * @example console.log('Hello, world!');
             */
            code: string;
            /**
             * @description Optional standard input for code execution.
             * @example input data
             */
            stdin?: string;
            /**
             * @description Programming language of the template.
             * @example javascript
             */
            language: string;
            /**
             * @description Tags associated with the template.
             * @example [
             *       "example",
             *       "template"
             *     ]
             */
            tags?: string[];
          };
        };
      };
      responses: {
        /** @description Template created successfully. */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              data?: components["schemas"]["Template"];
            };
          };
        };
        /** @description Bad request, possibly due to invalid input format. */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized, possibly due to missing or invalid authentication token. */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unprocessable entity, possibly due to invalid or missing input values. */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    User: {
      /** @example 1 */
      id: number;
      /** @example user@example.com */
      email: string;
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
      /** @example user */
      role: string;
      /**
       * Format: uri
       * @example https://example.com/avatar.jpg
       */
      avatar: string;
      /** @example +1234567890 */
      phoneNumber: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Template: {
      /** @example 1 */
      id: number;
      /** @example Template Title */
      title: string;
      /** @example Template Description */
      description: string;
      /** @example console.log('Hello, World!'); */
      code: string;
      /** @example input */
      stdin: string;
      /** @example false */
      isForked: boolean;
      /** @example 1 */
      forkedFromId: number;
      /** @example 1 */
      userId: number;
      /** @example [
       *       {
       *         "id": 1,
       *         "tag": "python"
       *       }
       *     ] */
      tamplateTags: {
        /** @example 1 */
        id: number;
        /** @example python */
        tag: string;
      }[];
      /** @example javascript */
      language: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Blog: {
      /** @example 1 */
      id: number;
      /** @example Blog Title */
      title: string;
      /** @example Blog Content */
      description: string;
      /** @example 1 */
      userId: number;
      /** @example true */
      isVisible: boolean;
      /** @example 5 */
      netRating: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @example [
       *       {
       *         "id": 1,
       *         "tag": "tutorial"
       *       }
       *     ] */
      tags: {
        id: number;
        tag: string;
      }[];
      links: {
        id: number;
        title: string;
      }[];
      user: {
        id: number;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string;
      };
    };
    BlogComment: {
      /** @example 1 */
      id: number;
      /** @example 123 */
      userId: number;
      /** @example 1 */
      blogPostId: number;
      /** @example This is a great post! Thanks for sharing. */
      content: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      netRating: number;
      parentId: number | null;
      blogPost: {
        id: number;
        title: string;
      };
      user: {
        id: number;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string;
      };
      _count: {
        replies: number;
      };
    };
    CodeExecution: {
      /** @example 1 */
      id?: number;
      /** @example 123 */
      userId?: number | null;
      /** @example javascript */
      language?: string;
      /** @example console.log('Hello, World!'); */
      code?: string;
      /** @example input */
      stdin?: string;
      /** @example Hello, World! */
      stdout?: string;
      stderr?: string;
      compileStdout?: string;
      compileStderr?: string;
      /** @example 100 */
      compileTimeMs?: number;
      /** @example true */
      isCompiled?: boolean;
      /** @example 50 */
      executionTimeMs?: number;
      /** @example 0 */
      exitCode?: number;
      /** @example completed */
      status?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    Report: {
      id: number;
      status: string;
      explanation: string;
      blogPostId?: number;
      commentId?: number;
      updatedAt: string;
      createdAt: string;
    }
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
